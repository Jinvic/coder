//https://codeforces.com/problemset/problem/797/B
//正解为构造
//求所有正数之和，若为奇，输出；若为偶，减正奇数数最小值或加负奇数最大值
#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
const int N = 100005;
const int inf = 0x7f7f7f7f;
const int mod = 1000000007;
const double eps = 1e-8;
int dp0[N][2], dp1[N][2]; //奇偶||最小最大值
signed main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0), cout.tie(0);
	int n, x;
	cin >> n;
	dp0[0][0] = dp0[0][1] = dp1[0][0] = dp1[0][1] = 0;
	int res = 0;
	for (int i = 1; i <= n; i++)
	{
		cin >> x;
		if (x % 2)
		{
			if (dp1[i - 1][1])
			{
				dp1[i][0] = min(dp1[i - 1][0], dp0[i - 1][0] + x);
				dp1[i][1] = max(dp1[i - 1][1], dp0[i - 1][1] + x);
				dp0[i][0] = min(dp0[i - 1][0], dp1[i - 1][0] + x);
				dp0[i][1] = max(dp0[i - 1][1], dp1[i - 1][1] + x);
			}
			else
			{
				dp1[i][0] = min(x, dp0[i - 1][0] + x);
				dp1[i][1] = max(x, dp0[i - 1][1] + x);
				dp0[i][0] = dp0[i - 1][0];
				dp0[i][1] = dp0[i - 1][1];
			}
		}
		else
		{
			if (dp1[i - 1][0])
			{
				dp1[i][0] = min(dp1[i - 1][0], dp1[i - 1][0] + x);
				dp1[i][1] = max(dp1[i - 1][1], dp1[i - 1][1] + x);
			}
			dp0[i][0] = min(dp0[i - 1][0], dp0[i - 1][0] + x);
			dp0[i][1] = max(dp0[i - 1][1], dp0[i - 1][1] + x);
		}
	}
	cout << dp1[n][1] << endl;
	return 0;
}
